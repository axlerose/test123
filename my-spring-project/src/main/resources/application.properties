# Spring Security OAuth2 Resource Server (Keycloak Integration)
spring.security.oauth2.resourceserver.jwt.issuer-uri=YOUR_KEYCLOAK_BASE_URL/realms/YOUR_REALM_NAME
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Optional: If you need to define audience(s) for your tokens
# spring.security.oauth2.resourceserver.jwt.audiences=your-client-id,account

# Default Spring Boot properties (can be expanded as needed)
spring.application.name=my-spring-project

# Database Configuration (PostgreSQL example, assuming default port and database name)
# Ensure you have the PostgreSQL driver in pom.xml
# spring.datasource.url=jdbc:postgresql://localhost:5432/mydatabase
# spring.datasource.username=user
# spring.datasource.password=password
# spring.jpa.hibernate.ddl-auto=update # Be cautious with this in production (options: none, validate, update, create, create-drop)
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Springdoc OpenAPI configuration
springdoc.version=v1.0
